'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { trpc } from '@/lib/trpc-client'
import { Plus, Edit, Trash2, User } from 'lucide-react'

type Athlete = {
  id: string
  firstName: string
  lastName: string
  nationalId: string | null
  email: string | null
  phone: string | null
  dateOfBirth: Date
  weight: number | null
  belt: string | null
  clubId: string
  club: {
    id: string
    name: string
  }
}

export default function AthletesManagement() {
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [editingAthlete, setEditingAthlete] = useState<Athlete | null>(null)
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    nationalId: '',
    email: '',
    phone: '',
    dateOfBirth: '',
    weight: '',
    belt: 'BLANCHE',
    clubId: ''
  })
  const router = useRouter()

  // Authentication check
  useEffect(() => {
    const token = localStorage.getItem('auth-token')
    if (!token) {
      router.push('/login')
      return
    }
    setIsAuthenticated(true)
    setIsLoading(false)
  }, [router])

  // Data queries
  const { data: athletes = [], refetch: refetchAthletes } = trpc.athletes.getAll.useQuery({}, {
    enabled: isAuthenticated
  })

  const { data: clubs = [] } = trpc.clubs.getAll.useQuery(undefined, {
    enabled: isAuthenticated
  })

  // Mutations
  const createAthleteMutation = trpc.athletes.create.useMutation({
    onSuccess: () => {
      refetchAthletes()
      setIsDialogOpen(false)
      resetForm()
    }
  })

  const updateAthleteMutation = trpc.athletes.update.useMutation({
    onSuccess: () => {
      refetchAthletes()
      setIsDialogOpen(false)
      setEditingAthlete(null)
      resetForm()
    }
  })

  const deleteAthleteMutation = trpc.athletes.delete.useMutation({
    onSuccess: () => {
      refetchAthletes()
    }
  })

  const resetForm = () => {
    setFormData({
      firstName: '',
      lastName: '',
      nationalId: '',
      email: '',
      phone: '',
      dateOfBirth: '',
      weight: '',
      belt: 'BLANCHE',
      clubId: ''
    })
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    const athleteData = {
      firstName: formData.firstName,
      lastName: formData.lastName,
      nationalId: formData.nationalId || null,
      email: formData.email || null,
      phone: formData.phone || null,
      dateOfBirth: new Date(formData.dateOfBirth),
      weight: formData.weight ? parseFloat(formData.weight) : null,
      belt: formData.belt,
      clubId: formData.clubId
    }

    if (editingAthlete) {
      updateAthleteMutation.mutate({ id: editingAthlete.id, ...athleteData })
    } else {
      createAthleteMutation.mutate(athleteData)
    }
  }

  const handleEdit = (athlete: Athlete) => {
    setEditingAthlete(athlete)
    setFormData({
      firstName: athlete.firstName,
      lastName: athlete.lastName,
      nationalId: athlete.nationalId || '',
      email: athlete.email || '',
      phone: athlete.phone || '',
      dateOfBirth: new Date(athlete.dateOfBirth).toISOString().split('T')[0],
      weight: athlete.weight?.toString() || '',
      belt: athlete.belt || 'BLANCHE',
      clubId: athlete.clubId
    })
    setIsDialogOpen(true)
  }

  const handleDelete = (athleteId: string) => {
    if (confirm('Êtes-vous sûr de vouloir supprimer cet athlète ?')) {
      deleteAthleteMutation.mutate({ id: athleteId })
    }
  }

  const getBeltColor = (belt: string | null) => {
    switch (belt?.toUpperCase()) {
      case 'BLANCHE': return 'bg-gray-100 text-gray-800'
      case 'JAUNE': return 'bg-yellow-100 text-yellow-800'
      case 'ORANGE': return 'bg-orange-100 text-orange-800'
      case 'VERTE': return 'bg-green-100 text-green-800'
      case 'BLEUE': return 'bg-blue-100 text-blue-800'
      case 'MARRON': return 'bg-yellow-600 text-white'
      case 'NOIRE': return 'bg-gray-900 text-white'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  if (isLoading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-[#d62027]"></div>
          <p className="mt-4 text-gray-600">Chargement...</p>
        </div>
      </div>
    )
  }

  if (!isAuthenticated) {
    return null
  }

  const beltOptions = [
    { value: 'BLANCHE', label: 'Ceinture Blanche' },
    { value: 'JAUNE', label: 'Ceinture Jaune' },
    { value: 'ORANGE', label: 'Ceinture Orange' },
    { value: 'VERTE', label: 'Ceinture Verte' },
    { value: 'BLEUE', label: 'Ceinture Bleue' },
    { value: 'MARRON', label: 'Ceinture Marron' },
    { value: 'NOIRE', label: 'Ceinture Noire' }
  ]

  return (
    <div className="p-6">
      <div className="max-w-7xl mx-auto">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              Gestion des Athlètes
            </h1>
            <p className="text-gray-600 mt-2">
              Gérez tous les athlètes de la ligue Casablanca-Settat
            </p>
          </div>
          
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              <Button 
                className="bg-[#d62027] hover:bg-[#d62027]/90"
                onClick={() => {
                  setEditingAthlete(null)
                  resetForm()
                }}
              >
                <Plus className="w-4 h-4 mr-2" />
                Nouvel Athlète
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>
                  {editingAthlete ? 'Modifier l\'Athlète' : 'Nouvel Athlète'}
                </DialogTitle>
                <DialogDescription>
                  {editingAthlete ? 'Modifiez les informations de l\'athlète' : 'Ajoutez un nouvel athlète à la ligue'}
                </DialogDescription>
              </DialogHeader>
              
              <form onSubmit={handleSubmit} className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="firstName">Prénom *</Label>
                    <Input
                      id="firstName"
                      value={formData.firstName}
                      onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}
                      required
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="lastName">Nom *</Label>
                    <Input
                      id="lastName"
                      value={formData.lastName}
                      onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}
                      required
                    />
                  </div>
                </div>
                
                <div>
                  <Label htmlFor="nationalId">CIN</Label>
                  <Input
                    id="nationalId"
                    value={formData.nationalId}
                    onChange={(e) => setFormData(prev => ({ ...prev, nationalId: e.target.value }))}
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="phone">Téléphone</Label>
                    <Input
                      id="phone"
                      value={formData.phone}
                      onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="dateOfBirth">Date de Naissance *</Label>
                    <Input
                      id="dateOfBirth"
                      type="date"
                      value={formData.dateOfBirth}
                      onChange={(e) => setFormData(prev => ({ ...prev, dateOfBirth: e.target.value }))}
                      required
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="weight">Poids (kg)</Label>
                    <Input
                      id="weight"
                      type="number"
                      step="0.1"
                      value={formData.weight}
                      onChange={(e) => setFormData(prev => ({ ...prev, weight: e.target.value }))}
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="belt">Ceinture *</Label>
                    <Select value={formData.belt} onValueChange={(value) => setFormData(prev => ({ ...prev, belt: value }))}>
                      <SelectTrigger>
                        <SelectValue placeholder="Sélectionner la ceinture" />
                      </SelectTrigger>
                      <SelectContent>
                        {beltOptions.map((belt) => (
                          <SelectItem key={belt.value} value={belt.value}>
                            {belt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <Label htmlFor="clubId">Club *</Label>
                    <Select value={formData.clubId} onValueChange={(value) => setFormData(prev => ({ ...prev, clubId: value }))}>
                      <SelectTrigger>
                        <SelectValue placeholder="Sélectionner un club" />
                      </SelectTrigger>
                      <SelectContent>
                        {clubs.map((club) => (
                          <SelectItem key={club.id} value={club.id}>
                            {club.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                
                <div className="flex space-x-2 pt-4">
                  <Button type="submit" className="flex-1 bg-[#d62027] hover:bg-[#d62027]/90">
                    {editingAthlete ? 'Modifier' : 'Créer'}
                  </Button>
                  <Button 
                    type="button" 
                    variant="outline" 
                    onClick={() => {
                      setIsDialogOpen(false)
                      setEditingAthlete(null)
                      resetForm()
                    }}
                    className="flex-1"
                  >
                    Annuler
                  </Button>
                </div>
              </form>
            </DialogContent>
          </Dialog>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Athlètes de la Ligue ({athletes.length})</CardTitle>
            <CardDescription>
              Gérez tous les athlètes de la ligue Casablanca-Settat
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Nom complet</TableHead>
                  <TableHead>Club</TableHead>
                  <TableHead>Ceinture</TableHead>
                  <TableHead>Poids</TableHead>
                  <TableHead>Contact</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {athletes.map((athlete) => (
                  <TableRow key={athlete.id}>
                    <TableCell>
                      <div className="flex items-center space-x-3">
                        <div className="bg-gray-100 rounded-full p-2">
                          <User className="h-4 w-4 text-gray-600" />
                        </div>
                        <div>
                          <div className="font-medium">
                            {athlete.firstName} {athlete.lastName}
                          </div>
                          {athlete.nationalId && (
                            <div className="text-sm text-gray-500">CIN: {athlete.nationalId}</div>
                          )}
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <span className="font-medium">{athlete.club.name}</span>
                    </TableCell>
                    <TableCell>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getBeltColor(athlete.belt)}`}>
                        {athlete.belt || 'Non définie'}
                      </span>
                    </TableCell>
                    <TableCell>
                      {athlete.weight ? `${athlete.weight} kg` : '-'}
                    </TableCell>
                    <TableCell>
                      <div className="text-sm">
                        {athlete.phone && <div>{athlete.phone}</div>}
                        {athlete.email && <div className="text-gray-500">{athlete.email}</div>}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex space-x-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleEdit(athlete)}
                        >
                          <Edit className="w-4 h-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleDelete(athlete.id)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
            
            {athletes.length === 0 && (
              <div className="text-center py-8">
                <p className="text-gray-500">Aucun athlète enregistré</p>
                <Button 
                  className="mt-4 bg-[#d62027] hover:bg-[#d62027]/90"
                  onClick={() => {
                    setEditingAthlete(null)
                    resetForm()
                    setIsDialogOpen(true)
                  }}
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Créer le premier athlète
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
